---
title: Water Quality Forecasts
---

This page contains information about the water quality of Canning Weir Pool water quality forecasts are created using the [FLARE](https://flare-forecast.org/) modeling framework deployed by the [VT Center for Ecosystem Forecasting](https://ecoforecast.centers.vt.edu/). Observational data is provided by [Water Data SA](https://water.data.sa.gov.au/). <br /> <br />

All forecasts are valid for 8:00am AWST (00:00 UTC). Red dots indicate in-situ observations. The black line indicates the mean forecast predictions (both past and future), with uncertainty provided for future forecasts. Uncertainty is separated into sections of higher confidence (blue) and lower confidence (grey) based on predicted days ahead. The climatology average is also included to provide a comparison of the current observations and forecast predictions against typical conditions for this time period. <br /> <br />

Disclaimer: The data provided on this page are experimental.<br /> <br />

```{r setup, message=FALSE, warning=FALSE, echo=FALSE}
library(tidyverse)
library(arrow)
source('./R/dashboard_plotting_tool.R')
```

## Water Temperature Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE}
s3_score <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/scores/parquet", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
s3_forecast <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/forecasts/parquet", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)

insitu_obs_url<- "https://renc.osn.xsede.org/bio230121-bucket01/flare/targets/CANN/CANN-targets-insitu.csv"
obs_cleaned <- readr::read_csv(insitu_obs_url) |> 
  filter(variable %in% c('TEMP','salt'),
         depth == 1.5) |> ##insitu sensors and met 
  #dplyr::filter(is.na(inflow_name)) |> 
  collect() |> 
  lubridate::with_tz(datetime, tzone = "Australia/Perth")


site <- 'CANN'

most_recent <-  arrow::open_dataset(s3_score) |> 
  filter(site_id %in% c("CANN"), 
         model_id == 'glm_flare_v3') |>
  summarize(max = max(reference_datetime)) |> 
  collect() |> 
  pull()

#source('R/alex_target_generation.R')

insitu_obs_url<- "https://renc.osn.xsede.org/bio230121-bucket01/flare/targets/CANN/CANN-targets-insitu.csv"

targets_df <- readr::read_csv(insitu_obs_url) |> 
  filter(variable %in% c('TEMP','salt'),
         depth == 1.5) |> ##insitu sensors and met 
  #dplyr::filter(is.na(inflow_name)) |> 
  collect() |> 
  mutate(variable = ifelse(variable == 'TEMP','temperature',variable)) |> 
  lubridate::with_tz(datetime, tzone = "Australia/Perth")

obs_df <- targets_df |> 
  filter(variable == 'temperature',
         datetime <= lubridate::with_tz(lubridate::as_datetime(most_recent) + lubridate::days(1),
                                        'Australia/Perth'))

# obs_df <- read_csv('./targets/ALEX-targets-insitu.csv') |> 
#   mutate(datetime = lubridate::with_tz(lubridate::as_datetime(datetime), 'Australia/Adelaide')) |> 
#   filter(variable == 'temperature',
#          datetime <= lubridate::with_tz(lubridate::as_datetime(most_recent) + lubridate::days(1),
#                                         'Australia/Adelaide')) |>
#   collect()

# obs_df <- arrow::open_csv_dataset(s3_targets) |> 
#   #read_csv('./targets/ALEX-targets-insitu.csv') |> 
#   # filter(datetime <= obs_dates_grab,
#   #        datetime <= most_recent) |> 
#   filter(variable == 'temperature',
#          datetime <= most_recent) |> 
#   #select(datetime, observation) |> 
#   collect() #|> 
#   #mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "temperature",
         depth %in% c(1.5),
         site_id %in% site,
         horizon >= 0,
         #reference_datetime == as.Date('1-05-25')) |> 
         reference_datetime == (most_recent),
         model_id == 'glm_flare_v3') |>
  dplyr::collect()


historical_horizon <- 60 
historical_reference_datetime <- most_recent - days(historical_horizon)

score_df_historic <- arrow::open_dataset(s3_score) |> 
    filter(variable == "temperature",
         depth %in% c(1.5),
         site_id %in% site,
         horizon == 1,
         reference_datetime >= historical_reference_datetime, 
         reference_datetime < most_recent,
         model_id == 'glm_flare_v3') |> 
  collect()
  

dashboard_plotting_tool(data = score_df, historic_data = score_df_historic, depths = c(1.5), tzone = 'Australia/Perth', ylims = c(10,30), site_name = site, obs_hist = obs_df, historical_horizon = historical_horizon, forecast_horizon_confidence = 10)

```

<br />

## Salinity Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## SALT PLOT 
obs_df <- targets_df |> 
  #read_csv('./targets/ALEX-targets-insitu.csv') |> 
  # filter(datetime <= obs_dates_grab,
  #        datetime <= most_recent) |> 
  filter(variable == 'salt') |> 
  #filter(datetime >= historical_reference_datetime) |> 
  #select(datetime, observation) |> 
  collect() |> 
  mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "salt",
         depth %in% c(1.5),
         site_id %in% site,
         horizon >= 0,
         reference_datetime == most_recent,
         model_id == 'glm_flare_v3') |>
  dplyr::collect()

score_df_historic <- arrow::open_dataset(s3_score) |> 
    filter(variable == "salt",
         depth %in% c(1.5),
         site_id %in% site,
         horizon == 1,
         reference_datetime >= historical_reference_datetime, 
         reference_datetime < most_recent,
         model_id == 'glm_flare_v3') |> 
  collect()
  

dashboard_plotting_tool(data = score_df, historic_data = score_df_historic, depths = c(1.5), tzone = 'Australia/Perth', ylims = c(0,1), site_name = site, obs_hist = obs_df, historical_horizon = historical_horizon, forecast_horizon_confidence = 10)

```

<br />

## Lake Depth Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE, eval=FALSE}
## Depth PLOT 
obs_df <- targets_df |> 
  #read_csv('./targets/ALEX-targets-insitu.csv') |> 
  # filter(datetime <= obs_dates_grab,
  #        datetime <= most_recent) |> 
  filter(variable == 'depth') |> 
  #select(datetime, observation) |> 
  collect() |> 
  mutate(reference_datetime = most_recent,
         observation = observation - 5.3) ## convert to AHD

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "depth",
         site_id %in% site,
         horizon >= 0,
         reference_datetime == most_recent,
         model_id == 'glm_flare_v3') |>
  mutate(mean = mean - 5.3,
         quantile10 = quantile10 - 5.3,
         quantile90 = quantile90 - 5.3) |> # calculate AHD (5.3 maxdepth)
  dplyr::collect()

score_df_historic <- arrow::open_dataset(s3_score) |> 
  filter(variable == "depth",
         site_id %in% site,
         horizon == 1,
         reference_datetime >= historical_reference_datetime, 
         reference_datetime < most_recent,
         model_id == 'glm_flare_v3') |> 
  mutate(mean = mean - 5.3,
         quantile10 = quantile10 - 5.3,
         quantile90 = quantile90 - 5.3) |> # calculate AHD (5.3 maxdepth) |> 
  collect()

dashboard_plotting_tool(data = score_df, historic_data = score_df_historic, depths = c(NA), tzone = 'Australia/Adelaide', ylims = c(0,1.2), site_name = site, obs_hist = obs_df, historical_horizon = historical_horizon, forecast_horizon_confidence = 10)
```
